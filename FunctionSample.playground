import UIKit

var str = "Hello, playground"

//func 関数名（外部名　内部名：型。）-> 戻り値型
func point(top y:Int, left x: Int) -> String {
    return "x:\(x) y:\(y)"
}

let p = point(top: 10, left: 4)

print(p)

var dot = point

//dot は関数として機能する
print(dot(20,30))

//高階関数を定義
func loggingExcute(targetFunc:(Int,Int)->String){
    print("before excute")
    print(targetFunc(30,20))
    print("after excute")
}

loggingExcute(targetFunc: dot)

// 操作対象の配列
let numbers = [11, 2, 5, -8, 0, 6]



func isOverTen(number:Int)-> Bool{
    return number > 10
}


//高階関数
let overTen = numbers.filter(isOverTen)
print(overTen)

//クロージャ
//クロージャの基本形
let overTen2 = numbers.filter({(number: Int) -> Bool in
    return number > 10
    
})
print(overTen2)

//クロージャの省略形 ()を追い出す　　引数リストの最後の引数はクロージャの場合使えます
let overTen3 = numbers.filter(){(number: Int) -> Bool in
    return number > 10
}
print(overTen3)

// 唯一の引数がクロージャであるため、filterメソッドから引数リストのカッコを省略
let overTen4 = numbers.filter{(number: Int) -> Bool in
    return number > 10
}
print("10より大きい数値:\(overTen4)")

// クロージャの引数の型と戻り値の型を省略
